// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/core/composer/melody/MelodicPatternGen"], function() {
    var MelodicPattern, MelodicPatternGen;
    MelodicPattern = AC.Core.MelodicPattern;
    MelodicPatternGen = AC.Core.MelodicPatternGen;
    describe("MelodicPattern Class", function() {
      it("initialize", function() {
        window.mp = new MelodicPattern({
          step_sequence: [1, 1, 1, -4],
          iterations: 3
        });
        return expect(mp).toBeTruthy();
      });
      it("cycle_amplitude", function() {
        return expect(mp.cycle_amplitude()).toEqual([-1, 3]);
      });
      it("cycle_step", function() {
        return expect(mp.cycle_step()).toEqual(-1);
      });
      it("total_sequence", function() {
        return expect(mp.total_sequence()).toEqual([1, 1, 1, -4, 1, 1, 1, -4, 1, 1, 1, -4]);
      });
      it("next", function() {
        var seq;
        seq = [];
        while (seq[seq.length - 1] !== false) {
          seq.push(mp.next());
        }
        return expect(seq).toEqual([1, 1, 1, -4, 1, 1, 1, -4, 1, 1, 1, -4, false]);
      });
      return it("length", function() {
        return expect(mp.length()).toEqual(12);
      });
    });
    return describe("MelodicPatternGen Class", function() {
      it("init", function() {
        window.mpg = new MelodicPatternGen({
          steps_array: [-2, -1, 0, 1, 2],
          iterations: [2, 3, 4],
          cycle_step: [-2, -1, 0, 1, 2],
          pattern_length: [4, 6]
        });
        return expect(mpg).toBeTruthy();
      });
      it("patterns calc", function() {
        return expect(mpg.patterns.length).toEqual(118);
      });
      return it("give_pattern", function() {
        return expect(mpg.give_pattern() instanceof MelodicPattern).toBe(true);
      });
    });
  });

}).call(this);
