// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/core/base/Mode"], function() {
    var AbstractMode, Mode;
    Mode = AC.Core.Mode;
    AbstractMode = AC.Core.AbstractMode;
    return describe("Mode class", function() {
      describe("constructor", function() {
        window.m1 = {};
        window.m2 = {};
        window.m3 = {};
        window.m4 = {};
        it("with name string", function() {
          window.m1 = new Mode("D Lyd+");
          return expect(m1).toBeTruthy();
        });
        it("with concrete array", function() {
          window.m2 = new Mode([2, 4, 6, 8, 10, 11, 1]);
          return expect(m2).toEqual(m1);
        });
        it("with abstract and root", function() {
          window.m3 = new Mode({
            abstract: new AbstractMode("Lyd+"),
            root: "D"
          });
          return expect(m3).toEqual(m1);
        });
        return it("with mother and degree", function() {
          window.m4 = new Mode({
            mother: "D Lyd+",
            degree: 1
          });
          return expect(m4).toEqual(m1);
        });
      });
      describe("setters", function() {
        it("set_root", function() {
          window.m1 = new Mode("E Lyd+");
          window.m2.set_root("E");
          return expect(m2).toEqual(m1);
        });
        it("set_abstract", function() {
          window.m1 = new Mode("E Dor");
          window.m2.set_abstract([0, 2, 3, 5, 7, 9, 10]);
          return expect(m2).toEqual(m1);
        });
        it("set_concrete", function() {
          window.m1 = new Mode("A Dor");
          window.m2.set_concrete([9, 11, 0, 2, 4, 6, 7]);
          return expect(m2).toEqual(m1);
        });
        it("set_name", function() {
          window.m1 = new Mode("E Dor");
          window.m2.set_name("E Dor");
          return expect(m2).toEqual(m1);
        });
        it("set_mother", function() {
          window.m1 = new Mode("E Melm");
          window.m2.set_mother("Lyd+");
          return expect(m2).toEqual(m1);
        });
        return it("set_prio", function() {
          var m1, m2, m3;
          m1 = new Mode("C Lyd");
          m1.set_prio([2, 4, 7]);
          expect(m1.prio).toEqual([2, 4, 7, 6, 11, 9]);
          m2 = new Mode("D Lyd");
          m2.set_prio([2, 4, 7, 3]);
          expect(m2.prio).toEqual([2, 4, 7, 6, 11, 9]);
          m3 = new Mode("E Lyd");
          m3.set_prio([2, 0, 4, 7]);
          return expect(m3.prio).toEqual([2, 4, 7, 6, 11, 9]);
        });
      });
      return describe("harmonic motions", function() {
        it("transpose", function() {
          window.m1 = new Mode("E Melm");
          window.m2 = new Mode("G Melm");
          window.m1.transpose(3);
          return expect(m2).toEqual(m1);
        });
        it("intra_rel_move", function() {
          window.m1 = new Mode("E Melm");
          window.m2 = new Mode("G Lyd+");
          window.m1.intra_rel_move(2);
          return expect(m2).toEqual(m1);
        });
        it("intra_abs_move", function() {
          window.m1 = new Mode("E Melm");
          window.m2 = new Mode("G Lyd+");
          window.m2.intra_abs_move(6);
          return expect(m2).toEqual(m1);
        });
        return it("relative", function() {
          window.m1 = new Mode("E Melm");
          window.m2 = new Mode("G Lyd+");
          window.m2.relative("Melm");
          return expect(m2).toEqual(m1);
        });
      });
    });
  });

}).call(this);
