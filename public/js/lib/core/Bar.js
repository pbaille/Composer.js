// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/core/RVal", "vendors/ruby"], function() {
    var RVal, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    RVal = AC.Core.RVal;
    return root.Bar = (function() {
      function Bar(opt) {
        this.bpm = opt.bpm;
        this.beats = opt.beats;
        this.beat_val = opt.beat_val;
        this.resolution = opt.resolution || null;
        this.harmonic_directives = opt.harmonic_directives || [];
        this.rythmic_directives = opt.rythmic_directives || [];
        this.melodic_directives = opt.melodic_directives || [];
        this.bpm_directives = opt.bpm_directives || [];
      }

      Bar.prototype.duration = function() {
        return this.beat_val.times(this.beats);
      };

      Bar.prototype.ms_duration = function() {
        if (_a.empty(this.bpm_directives)) {
          return this.duration().times(new RVal(60, this.bpm)) * 1000;
        } else {
          return "not yet implemented";
        }
      };

      Bar.prototype.ms_duration_at = function(sub) {
        if (_a.empty(this.bpm_directives)) {
          return sub.div(this.duration()).toFloat() * this.ms_duration();
        } else {
          return "not yet implemented";
        }
      };

      Bar.prototype.h_dir_at = function(sub) {
        var hd, result, _i, _len, _ref;
        result = {};
        _ref = this.harmonic_directives;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hd = _ref[_i];
          if (hd.at.gt(sub)) {
            break;
          }
          result = hd.mode;
        }
        return result;
      };

      Bar.prototype.r_dir_at = function(sub) {};

      Bar.prototype.m_dir_at = function(sub) {};

      Bar.prototype.bpm_dir_at = function(sub) {};

      return Bar;

    })();
  });

}).call(this);
