// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["lib/core/Domain", "vendors/ruby"], function() {
    var Domain, Mode, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    Domain = AC.Core.Domain;
    Mode = AC.Core.Mode;
    return root.MGen = (function(_super) {
      __extends(MGen, _super);

      function MGen(opt) {
        var bounds, mode;
        if (!opt) {
          opt = {};
        }
        bounds = opt.bounds || [50, 80];
        mode = opt.mode || new Mode("C Lyd");
        MGen.__super__.constructor.call(this, mode, bounds);
        this.composer = null;
      }

      MGen.prototype.melodize = function(positioned_rvals_arr) {
        var line, n, pitch, pos_rval, vel, _i, _len;
        line = [];
        for (_i = 0, _len = positioned_rvals_arr.length; _i < _len; _i++) {
          pos_rval = positioned_rvals_arr[_i];
          pitch = this.pitchify(pos_rval);
          vel = Math.floor(Math.random() * 30 + 40);
          n = new AC.Core.Note(pitch, vel, pos_rval.rval, pos_rval.position);
          line.push(n);
        }
        return timeline.play_line(line);
      };

      MGen.prototype.pitchify = function(pos_rval) {
        var pioche;
        pioche = _a.shuffle(this.pitches_values());
        return pioche[0];
      };

      return MGen;

    })(Domain);
  });

}).call(this);
