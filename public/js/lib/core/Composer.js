// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/core/RVal", "lib/core/RGen", "lib/core/MGen", "lib/core/HGen"], function() {
    var HGen, MGen, RGen, RVal, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    RVal = AC.Core.RVal;
    RGen = AC.Core.RGen;
    MGen = AC.Core.MGen;
    HGen = AC.Core.HGen;
    return root.Composer = (function() {
      function Composer(opt) {
        if (!opt) {
          opt = {};
        }
        this.strategy = this.set_strategy(opt.strategy);
        this.rgen = opt.rgen || new RGen;
        this.mgen = opt.mgen || new MGen;
        this.hgen = opt.hgen || new HGen;
        this.rgen.composer = this.mgen.composer = this.hgen.composer = this;
        this.ahead = new RVal(0);
        this.advance = opt.advance || new RVal(2);
      }

      Composer.prototype.head_position = function() {
        return timeline.position.plus(this.ahead);
      };

      Composer.prototype.apply_directive = function(d) {
        var _ref, _ref1, _ref2;
        switch (d.type) {
          case "rythmic":
            return (_ref = this.rgen)[d.method_name].apply(_ref, d.args);
          case "melodic":
            return (_ref1 = this.mgen)[d.method_name].apply(_ref1, d.args);
          case "harmonic":
            (_ref2 = this.hgen)[d.method_name].apply(_ref2, d.args);
            return this.mgen.set_mode(this.hgen.current);
        }
      };

      Composer.prototype.tic = function() {
        if (this.ahead.lt(this.advance)) {
          this.strategy();
        }
        return this.ahead.subtract(timeline.resolution);
      };

      Composer.prototype.set_strategy = function(strat_name) {
        var _this = this;
        if (strat_name == null) {
          strat_name = "default";
        }
        if (strat_name === "default") {
          return function() {
            var rythmn_line;
            rythmn_line = _this.rgen.generate();
            return _this.mgen.melodize(rythmn_line);
          };
        }
      };

      return Composer;

    })();
  });

}).call(this);
