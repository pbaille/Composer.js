// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(["lib/core/base/Mode"], function() {
    var MK, Mode, Pitch, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    MK = root.MK;
    Pitch = root.Pitch;
    Mode = AC.Core.Mode;
    return root.Domain = (function() {
      function Domain(opt) {
        this.mode = opt.mode;
        this.bounds = opt.bounds;
        this.pitches = this.pitches_calc();
        this.main_struct = opt.main_struct || this.mode.prio.slice(0, 4);
      }

      Domain.prototype.pitches_calc = function() {
        var res, x, _i, _ref, _ref1;
        res = [];
        for (x = _i = _ref = this.bounds[0], _ref1 = this.bounds[1]; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; x = _ref <= _ref1 ? ++_i : --_i) {
          if (this.mode.concrete.indexOf(x % 12) >= 0) {
            res.push(new Pitch(x));
          }
        }
        return res;
      };

      Domain.prototype.set_bounds = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length === 1) {
          return this.bounds = args;
        } else {
          return this.bounds = [args[0], args[1]];
        }
      };

      Domain.prototype.set_up_bound = function(up) {
        return this.bounds[1] = up;
      };

      Domain.prototype.set_down_bound = function(down) {
        return this.bounds[0] = down;
      };

      Domain.prototype.pitches_values = function() {
        return this.pitches.map(function(x) {
          return x.value;
        });
      };

      Domain.prototype.set_mode = function(m) {
        if (m instanceof Mode) {
          this.mode = m;
        } else {
          this.mode = new Mode(m);
        }
        return this.pitches = this.pitches_calc();
      };

      Domain.prototype.main_pitches = function() {
        var p, result, _i, _len, _ref;
        result = [];
        _ref = this.pitches;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          if (this.main_struct.indexOf(p.value % 12) >= 0) {
            result.push(p);
          }
        }
        return result;
      };

      return Domain;

    })();
  });

}).call(this);
