// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(["lib/core/base/Mode", "lib/core/base/MelodicContext"], function() {
    var MK, MelodicContext, Mode, Pitch, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    MK = root.MK;
    Pitch = root.Pitch;
    Mode = AC.Core.Mode;
    MelodicContext = AC.Core.MelodicContext;
    return root.Domain = (function(_super) {
      __extends(Domain, _super);

      function Domain(opt) {
        Domain.__super__.constructor.call(this, opt);
        this.bounds = opt.bounds || [50, 80];
        this.pitches = this.pitches_calc();
        this.main_pitches = this.main_pitches_calc();
      }

      Domain.prototype.pitches_calc = function() {
        var available_concrete, res, x, _i, _ref, _ref1;
        res = [];
        available_concrete = this.available_concrete();
        for (x = _i = _ref = this.bounds[0], _ref1 = this.bounds[1]; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; x = _ref <= _ref1 ? ++_i : --_i) {
          if (available_concrete.indexOf(x % 12) >= 0) {
            res.push(new Pitch(x));
          }
        }
        return res;
      };

      Domain.prototype.set_bounds = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length === 1) {
          return this.bounds = args;
        } else {
          return this.bounds = [args[0], args[1]];
        }
      };

      Domain.prototype.set_up_bound = function(up) {
        return this.bounds[1] = up;
      };

      Domain.prototype.set_down_bound = function(down) {
        return this.bounds[0] = down;
      };

      Domain.prototype.pitches_values = function() {
        return this.pitches.map(function(x) {
          return x.value;
        });
      };

      Domain.prototype.set_melodic_context = function(mode, degrees_functions) {
        this.mode = mode;
        if (degrees_functions) {
          set_degrees_functions(degrees_functions);
        } else {
          this.default_degrees_functions_init();
        }
        this.pitches = this.pitches_calc();
        return this.main_pitches = this.main_pitches_calc();
      };

      Domain.prototype.set_degrees_functions = function(degrees_functions) {
        Domain.__super__.set_degrees_functions.call(this, degrees_functions);
        this.pitches = this.pitches_calc();
        return this.main_pitches = this.main_pitches_calc();
      };

      Domain.prototype.main_pitches_calc = function() {
        var main_concrete, p, result, _i, _len, _ref;
        result = [];
        main_concrete = this.main_concrete();
        _ref = this.pitches;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          if (main_concrete.indexOf(p.value % 12) >= 0) {
            result.push(p);
          }
        }
        return result;
      };

      Domain.prototype.indexOf = function(pitch) {
        var i, index, p, _i, _len, _ref;
        index = void 0;
        _ref = this.pitches;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          p = _ref[i];
          if (pitch.eq(p)) {
            index = i;
            break;
          }
        }
        return index;
      };

      return Domain;

    })(MelodicContext);
  });

}).call(this);
