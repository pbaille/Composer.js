// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(["lib/core/base/Constants"], function() {
    var MK, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    MK = root.MK;
    return root.Degree = (function() {
      Degree.NAME_DIST_MAP = {
        "R": 0,
        "m2": 1,
        "M2": 2,
        "#2": 3,
        "o3": 2,
        "m3": 3,
        "M3": 4,
        "#3": 5,
        "b4": 4,
        "P4": 5,
        "+4": 6,
        "b5": 6,
        "P5": 7,
        "+5": 8,
        "m6": 8,
        "M6": 9,
        "#6": 10,
        "o7": 9,
        "m7": 10,
        "M7": 11
      };

      Degree.DEFAULTS = {
        "root": "R ",
        "second": "M2",
        "third": "M3",
        "fourth": "P4",
        "fifth": "P5",
        "sixt": "M6",
        "seventh": "M7"
      };

      Degree.ALTERATIONS = {
        root: {
          0: "R"
        },
        second: {
          1: "m2",
          2: "M2",
          3: "#2"
        },
        third: {
          2: "o3",
          3: "m3",
          4: "M3",
          5: "#3"
        },
        fourth: {
          4: "b4",
          5: "P4",
          6: "+4"
        },
        fifth: {
          6: "b5",
          7: "P5",
          8: "+5"
        },
        sixt: {
          8: "m6",
          9: "M6",
          10: "#6"
        },
        seventh: {
          9: "o7",
          10: "m7",
          11: "M7"
        }
      };

      function Degree() {
        var args, test;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        test = Number(args[0][1]);
        if (!test) {
          this.generic_name = args[0];
          if (args.length === 2) {
            this.name = root.Degree.ALTERATIONS[args[0]][args[1]];
          } else {
            this.name = root.Degree.DEFAULTS[args[0]];
          }
        } else {
          this.name = args[0];
          this.generic_name = MK.ABSTRACT_DEGREES[Number(args[0][1]) - 1];
        }
        this.dist = root.Degree.NAME_DIST_MAP[this.name];
      }

      Degree.prototype.alt = function(modifier) {
        var current_index, new_name;
        current_index = Degree.alt_map()[this.generic_name].indexOf(this.name);
        if (new_name = Degree.alt_map()[this.generic_name][current_index + modifier]) {
          return new Degree(new_name);
        } else {
          return void 0;
        }
      };

      Degree.prototype.eq = function(other_deg) {
        if (this.dist === other_deg.dist && this.name === other_deg.name) {
          return true;
        } else {
          return false;
        }
      };

      Degree.prototype.dist_up_to = function(other_deg) {
        return (other_deg.dist - this.dist + 12) % 12;
      };

      Degree.prototype.dist_down_to = function(other_deg) {
        return (this.dist - other_deg.dist + 12) % 12;
      };

      Degree.alt_map = function() {
        var dam, index, k, v, _ref;
        dam = {};
        _ref = root.Degree.NAME_DIST_MAP;
        for (k in _ref) {
          v = _ref[k];
          index = Number(k[1]) - 1;
          if (!dam[MK.ABSTRACT_DEGREES[index]]) {
            dam[MK.ABSTRACT_DEGREES[index]] = [];
          }
          dam[MK.ABSTRACT_DEGREES[index]].push(k);
        }
        return dam;
      };

      return Degree;

    })();
  });

}).call(this);
