// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(["lib/core/Constants", "lib/utils/Array_adds"], function() {
    var MK, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    MK = root.MK;
    return root.AbstractMode = (function() {
      function AbstractMode() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length === 1) {
          if (typeof args[0] === "string") {
            this.new_by_name(args[0]);
          } else {
            this.new_by_functs(args[0]);
          }
        } else {
          this.new_by_mother(args[0], args[1]);
        }
      }

      AbstractMode.Abs_moth = function(name, functs) {
        return {
          name: name,
          functs: functs
        };
      };

      AbstractMode.prototype.new_by_name = function(s) {
        var k, v, _ref, _results;
        _ref = MK.MOTHERS;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          if (v.degrees.indexOf(s) >= 0) {
            this.name = s;
            this.degree = v.degrees.indexOf(s) + 1;
            this.functs = this.childs(k)[this.degree - 1];
            this.mother = AbstractMode.Abs_moth(k, v.functs);
            _results.push(this.prio = v.modes_prio[this.degree]);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      AbstractMode.prototype.new_by_mother = function(m, d) {
        var mot;
        if (d == null) {
          d = 1;
        }
        mot = MK.MOTHERS[m];
        this.name = mot.degrees[d - 1];
        this.functs = mot.functs.rotate(d - 1).tonicize();
        this.prio = mot.modes_prio[d - 1];
        this.mother = AbstractMode.Abs_moth(m, mot.functs);
        return this.degree = d;
      };

      AbstractMode.prototype.new_by_functs = function(a) {
        var k, v, _ref;
        console.log("new by functs");
        _ref = MK.all_modes;
        for (k in _ref) {
          v = _ref[k];
          if (_.uniq(a.concat(v)).length === v.length) {
            this.new_by_name(k);
            break;
          }
        }
        if (!this.name) {
          this.name = "unknown";
          this.functs = a;
          this.prio = a.slice(1, a.length);
          this.mother = AbstractMode.Abs_moth("unknown", a);
          return this.degree = 1;
        }
      };

      AbstractMode.prototype.childs = function(m) {
        return MK.MOTHERS[m].functs.tonicized_rotations();
      };

      AbstractMode.prototype.moth_offset = function() {
        if (!this.is_mother()) {
          return this.mother.functs[this.degree - 1];
        } else {
          return 0;
        }
      };

      AbstractMode.prototype.is_mother = function() {
        return this.name === this.mother.name && this.functs === this.mother.functs;
      };

      AbstractMode.prototype.degrees_names = function() {
        var hash, i, x, _i, _len, _ref;
        hash = {};
        _ref = this.functs;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          x = _ref[i];
          hash[x] = MK.DEGREES_NAMES[i][x];
        }
        return hash;
      };

      return AbstractMode;

    })();
  });

}).call(this);
