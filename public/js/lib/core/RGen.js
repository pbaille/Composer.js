// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(["lib/utils/Rational", "lib/utils/Utils", "lib/core/Note", "lib/midi/play", "vendors/ruby"], function() {
    var rat, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    rat = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(AC.Utils.Rational, args, function(){});
    };
    return root.RGen = (function() {
      function RGen(opt) {
        this.array = opt.prob_array || [];
        this.head_position = null;
        this.streamLen = opt.streamLen;
      }

      RGen.prototype.add = function(dur_occ_obj) {
        var x, _i, _len, _results;
        if (!dur_occ_obj.length) {
          dur_occ_obj = [dur_occ_obj];
        }
        _results = [];
        for (_i = 0, _len = dur_occ_obj.length; _i < _len; _i++) {
          x = dur_occ_obj[_i];
          this.remove(x.value);
          _results.push(this.array.push(x));
        }
        return _results;
      };

      RGen.prototype.reset = function(dur_occ_objs) {
        this.array = [];
        if (dur_occ_objs) {
          return this.add(dur_occ_objs);
        }
      };

      RGen.prototype.reset_clock = function() {
        return this.clock = rat(0, 1);
      };

      RGen.prototype.rvs_sync = function(rvs_table) {
        var _this = this;
        this.reset();
        return _h.each(rvs_table, function(k, v) {
          return _this.add({
            value: rat(4, k),
            occ: v
          });
        });
      };

      RGen.prototype.remove = function(dur) {
        var i, rem_indexes, x, _i, _j, _len, _len1, _ref, _results;
        rem_indexes = [];
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          x = _ref[i];
          if (x.value.eq(dur)) {
            rem_indexes.push(i);
          }
        }
        _results = [];
        for (_j = 0, _len1 = rem_indexes.length; _j < _len1; _j++) {
          x = rem_indexes[_j];
          _results.push(this.array.splice(x, 1));
        }
        return _results;
      };

      RGen.prototype.denoms = function() {
        var results;
        results = [1];
        this.array.map(function(x) {
          var bases_arr, d, den, dens, mod, poly, _i, _len, _results;
          if (x.occ === 0) {
            return;
          }
          den = x.value.denom;
          if (results.indexOf(den) !== -1) {
            return;
          }
          bases_arr = _a.uniq(AC.Utils.factorise(den));
          if (bases_arr[1]) {
            poly = bases_arr[1];
            dens = [den, den / poly];
          } else {
            dens = [den];
          }
          _results = [];
          for (_i = 0, _len = dens.length; _i < _len; _i++) {
            d = dens[_i];
            mod = 0;
            _results.push((function() {
              var _results1;
              _results1 = [];
              while (mod === 0) {
                if (results.indexOf(d) === -1) {
                  results.push(d);
                }
                mod = d % 2;
                _results1.push(d /= 2);
              }
              return _results1;
            })());
          }
          return _results;
        });
        return results;
      };

      RGen.prototype.bang = function(metronome) {
        this.origin = metronome.origin_point;
        this.bpm = metronome.bpm;
        this.current_time = metronome.total();
        if (!this.head_position) {
          this.head_position = this.current_time.dup();
        }
        if ((this.head_position.minus(this.current_time)).lt(this.streamLen)) {
          this.insertion_point = this.head_position.dup();
          return this.generate();
        }
      };

      RGen.prototype.generate = function() {
        var results;
        results = [];
        while (this.head_position.minus(this.current_time).lt(this.streamLen)) {
          results.push(this.next());
        }
        if (results) {
          return this.melodize(results);
        }
      };

      RGen.prototype.next = function() {
        var i, pioche, x, _i, _j, _len, _ref, _ref1;
        pioche = [];
        _ref = this.available_vals();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          for (i = _j = 0, _ref1 = x.occ - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            pioche.push(x.value);
          }
        }
        pioche = _a.shuffle(pioche);
        this.head_position.add(pioche[0]);
        return pioche[0];
      };

      RGen.prototype.available_vals = function() {
        var cond1, cond2, results, x, _i, _len, _ref,
          _this = this;
        results = [];
        _ref = this.array;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          if (x.occ !== 0) {
            cond1 = this.denoms().indexOf(x.value.plus(this.head_position).denom) >= 0;
            cond2 = function() {
              console.log("###################################");
              console.log("cond2 " + _this.current_sub());
              console.log("x= " + x.value.denom);
              if (_this.current_sub() % 2 === 0 || _this.current_sub() === 1) {
                console.log("bin");
                return true;
              } else {
                console.log("other " + _a.last(AC.Utils.factorise(x.value.denom)));
                return _a.last(AC.Utils.factorise(x.value.denom)) === _a.last(AC.Utils.factorise(_this.current_sub()));
              }
            };
            if (cond1 && cond2()) {
              results.push(x);
            }
          }
        }
        if (results.length === 0) {
          results.push(this.resolve_head());
        }
        return results;
      };

      RGen.prototype.resolve_head = function() {
        var sub, value;
        console.log("resolve head");
        sub = this.current_sub();
        value = rat(0, 1);
        while (this.denoms().indexOf(value.plus(this.head_position).denom) < 0) {
          value.add(rat(1, sub));
        }
        console.log("value= " + value);
        console.log("head= " + this.head_position);
        return {
          value: value,
          occ: 1
        };
      };

      RGen.prototype.current_sub = function() {
        return this.head_position.denom;
      };

      RGen.prototype.melodize = function(rythmic_line) {
        var duration, line, n, pitch, vel, _i, _len;
        line = [];
        for (_i = 0, _len = rythmic_line.length; _i < _len; _i++) {
          duration = rythmic_line[_i];
          pitch = Math.floor(Math.random() * 30 + 50);
          vel = Math.floor(Math.random() * 30 + 40);
          n = new AC.Core.Note(pitch, vel, duration.times(rat(60, this.bpm)));
          line.push(n);
        }
        return this.send_to_midi(line);
      };

      RGen.prototype.send_to_midi = function(line, position) {
        return AC.MIDI.line({
          notes: line,
          at: this.origin + this.insertion_point.times(rat(60, this.bpm)).toFloat() * 1000
        });
      };

      RGen.prototype.pause = function() {};

      return RGen;

    })();
  });

}).call(this);
