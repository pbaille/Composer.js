// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(["lib/core/Mode", "vendors/ruby"], function() {
    var MK, Mode, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    MK = root.MK;
    Mode = root.Mode;
    return root.HGen = (function() {
      function HGen(o) {
        this.current = new Mode(o || new Mode("C Lyd"));
        this.center = this.current.mother_mode();
        this["function"] = "T";
      }

      HGen.prototype.abs_move = function() {
        var args, new_mother_root_name;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        new_mother_root_name = _h.key(MK.PITCHES, (this.center.root.int + MK.MODAL_MOVES[args[0]]) % 12);
        this.current.set_mother(new_mother_root_name + " " + this.current.mother.name.split(' ')[1]);
        this["function"] = args[0];
        if (args[1]) {
          if (typeof args[1] === "string") {
            return this.relative(args[1]);
          } else {
            return this.intra_abs_move(args[1]);
          }
        }
      };

      HGen.prototype.rel_move = function() {
        var args, dist;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.current.transpose(MK.MODAL_MOVES[args[0]]);
        if (args[1]) {
          if (typeof args[1] === "string") {
            this.relative(args[1]);
          } else {
            this.intra_abs_move(args[1]);
          }
        }
        dist = (this.current.mother.root - this.center.mother.root) % 12;
        return this["function"] = _h.key(MK.MODAL_MOVES, dist);
      };

      HGen.prototype.intra_abs_move = function(n) {
        return this.current.intra_abs_move(n);
      };

      HGen.prototype.intra_rel_move = function(n) {
        return this.current.intra_rel_move(n);
      };

      HGen.prototype.relative = function(mode_name) {
        return this.current.relative(mode_name);
      };

      HGen.prototype.centerize = function() {
        return this.center = new Mode(this.current.mother.name);
      };

      HGen.prototype.set_center = function(o) {
        var dist;
        this.center = new Mode(o);
        dist = (this.current.mother.root - this.center.mother.root) % 12;
        return this["function"] = _h.key(MK.MODAL_MOVES, dist);
      };

      return HGen;

    })();
  });

}).call(this);
