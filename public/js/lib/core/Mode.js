// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/core/Constants", "lib/core/Note", "lib/core/Degree", "lib/core/AbstractMode", "vendors/ruby"], function() {
    var AbstractMode, Degree, MK, PitchClass, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    MK = root.MK;
    PitchClass = root.PitchClass;
    AbstractMode = AC.Core.AbstractMode;
    Degree = root.Degree;
    return root.Mode = (function() {
      Mode.Moth = function(root, name, functs) {
        return {
          root: root,
          name: name,
          functs: functs
        };
      };

      function Mode(o) {
        if (typeof o === "string") {
          o = {
            name: o
          };
        }
        if (o instanceof Array) {
          o = {
            concrete: o
          };
        }
        if (o.concrete) {
          this.root = new PitchClass(o.concrete[0]);
          this.concrete = o.concrete;
          this.abstract_calc();
          this.name_calc();
          this.mother_calc();
        } else if (o.name) {
          if (o.name.split(' ').length === 2) {
            this.name = o.name;
          } else {
            this.name = "C " + o[name];
          }
          this.root = new PitchClass(this.name.split(' ')[0]);
          this.abstract = new AbstractMode(this.name.split(' ')[1]);
          this.concrete_calc();
          this.mother_calc();
        } else if (o.abstract && o.root) {
          this.root = new PitchClass(o.root);
          if (o.abstract instanceof AbstractMode) {
            this.abstract = o.abstract;
          } else {
            this.abstract = new AbstractMode(o.abstract);
          }
          this.concrete_calc();
          this.name_calc();
          this.mother_calc();
        } else if (o.mother && o.degree) {
          this.abstract = new AbstractMode(o.mother.split(' ')[1], o.degree);
          this.root = new PitchClass(MK.PITCHES[o.mother.split(' ')[0]] + this.abstract.moth_offset());
          this.concrete_calc();
          this.mother_calc();
          this.name_calc();
        } else {
          p("have to provide abstract/root or concrete or name or mother/degree");
        }
        this.degrees_calc();
        this.prio = o.prio || this.prio_calc();
      }

      Mode.prototype.root_calc = function() {
        return this.root = new PitchClass(this.concrete[0]);
      };

      Mode.prototype.abstract_calc = function() {
        return this.abstract = new AbstractMode(this.concrete.tonicize());
      };

      Mode.prototype.concrete_calc = function() {
        var r,
          _this = this;
        r = this.root;
        return this.concrete = this.abstract.functs.map(function(x) {
          return (x + r.int) % 12;
        });
      };

      Mode.prototype.prio_calc = function() {
        return this.prio = this.abstract.prio;
      };

      Mode.prototype.name_calc = function() {
        if (this.abstract.name) {
          return this.name = this.root.name + " " + this.abstract.name;
        } else {
          return this.name = this.root.name + " Unknown";
        }
      };

      Mode.prototype.mother_calc = function() {
        var r;
        r = this.mother_root();
        return this.mother = root.Mode.Moth(r, _h.key(MK.PITCHES, r) + " " + this.abstract.mother.name, this.abstract.mother.functs);
      };

      Mode.prototype.degrees_calc = function() {
        var i, x, _i, _len, _ref, _results;
        this.degrees = [];
        _ref = this.abstract.functs.slice(1, 8);
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          x = _ref[i];
          _results.push(this.degrees.push(new Degree(MK.ABSTRACT_DEGREES[i + 1], x)));
        }
        return _results;
      };

      Mode.prototype.set_root = function(arg) {
        if (arg instanceof PitchClass) {
          this.root = arg;
        } else {
          this.root = new PitchClass(arg);
        }
        this.concrete_calc();
        this.name_calc();
        return this.mother_calc();
      };

      Mode.prototype.set_abstract = function(arg) {
        if (arg instanceof Array) {
          this.abstract = new AbstractMode(arg);
        } else {
          this.abstract = arg;
        }
        this.concrete_calc();
        this.name_calc();
        this.prio_calc();
        this.mother_calc();
        return this.degrees_calc();
      };

      Mode.prototype.set_concrete = function(arg) {
        this.concrete = arg;
        this.root_calc();
        this.abstract_calc();
        this.name_calc();
        this.prio_calc();
        this.mother_calc();
        return this.degrees_calc();
      };

      Mode.prototype.set_name = function(arg) {
        this.name = arg;
        this.root = new PitchClass(arg.split(' ')[0]);
        this.abstract = new AbstractMode(arg.split(' ')[1]);
        this.concrete_calc();
        this.prio_calc();
        this.mother_calc();
        return this.degrees_calc();
      };

      Mode.prototype.set_mother = function(moth_name) {
        if (moth_name.split(' ').length === 1) {
          this.abstract = new AbstractMode(moth_name, this.degree());
          this.root = new PitchClass((this.mother_root() + this.abstract.moth_offset()) % 12);
        } else {
          this.abstract = new AbstractMode(moth_name.split(' ')[1], this.degree());
          this.root = new PitchClass((MK.PITCHES[moth_name.split(' ')[0]] + this.abstract.moth_offset()) % 12);
        }
        this.concrete_calc();
        this.prio_calc();
        this.mother_calc();
        this.name_calc();
        return this.degrees_calc();
      };

      Mode.prototype.intra_rel_move = function(n) {
        return this.set_concrete(_a.rotate(this.concrete, n));
      };

      Mode.prototype.intra_abs_move = function(n) {
        return this.set_concrete(_a.rotate(this.concrete, (n - 1) - (this.degree() - 1)));
      };

      Mode.prototype.relative = function(mode_name_str) {
        var k, v, _ref;
        _ref = MK.MOTHERS;
        for (k in _ref) {
          v = _ref[k];
          if (v.degrees.indexOf(mode_name_str) >= 0) {
            this.abstract = new AbstractMode(k, (v.degrees.indexOf(mode_name_str)) + 1);
            this.set_root(new PitchClass((this.mother.root + this.abstract.moth_offset()) % 12));
          }
        }
        this.set_mother(new AbstractMode(mode_name_str).mother.name);
        return this;
      };

      Mode.prototype.transpose = function(n) {
        this.set_root(new PitchClass((this.root.int + n + 12) % 12));
        return this;
      };

      Mode.prototype.mother_struct_link = function() {
        var i, x, _i, _len, _ref;
        _ref = all_moth_funct_struct(this.concrete.length);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          if (i = this.concrete.is_transposition_of(x)) {
            return [x, i];
          }
        }
      };

      Mode.prototype.mother_root = function() {
        return (this.root.int - this.abstract.moth_offset() + 12) % 12;
      };

      Mode.prototype.degree = function() {
        return this.abstract.degree;
      };

      Mode.prototype.clone = function() {
        return Mode["new"]({
          name: this.name,
          prio: this.prio
        });
      };

      return Mode;

    })();
  });

}).call(this);
