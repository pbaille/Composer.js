// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/core/base/RVal", "lib/utils/Rational", "lib/core/structure/Position", "lib/midi/play"], function() {
    var Note, Position, RVal, Rational, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    Rational = AC.Utils.Rational;
    RVal = AC.Core.RVal;
    Position = AC.Core.Position;
    Note = AC.Core.Note;
    return root.TimeLine = (function() {
      function TimeLine(opt) {
        var _this = this;
        this.origin_point = null;
        this.position = new Position({
          cycle: 0,
          bar: 0,
          sub: new RVal(0)
        });
        this.resolution = opt.resolution || new Rational(1, 4);
        this.grid = opt.grid || [];
        this.cycle = opt.cycle || false;
        this.is_on = false;
        this.tracks = opt.tracks || [];
        this.score = [];
        this.on_tic = function() {
          return console.log("" + (_this.position.bar + '>' + _this.position.sub.numer + '/' + _this.position.sub.denom));
        };
      }

      TimeLine.prototype.tic = function() {
        var t, _i, _len, _ref, _results;
        _ref = this.tracks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(t.tic());
        }
        return _results;
      };

      TimeLine.prototype.start = function(position) {
        var instance,
          _this = this;
        if (position) {
          this.position = position;
        } else {
          this.position = new Position({
            cycle: 0,
            bar: 0,
            sub: new RVal(0, 1),
            timeline: this
          });
        }
        this.origin_point = window.performance.now();
        this.is_on = true;
        this.speed = (60000 / this.current_bar().bpm) * this.current_bar().resolution.toFloat();
        this.tic();
        instance = function() {
          var diff, prev_bar_index;
          prev_bar_index = _this.position.bar;
          _this.position = _this.position.plus(_this.resolution);
          if (prev_bar_index !== _this.position.bar) {
            _this.speed = (60000 / _this.current_bar().bpm) * _this.current_bar().resolution.toFloat();
          }
          _this.tic();
          diff = _this.check_precision();
          if (_this.is_on) {
            return setTimeout(instance, _this.speed - diff);
          }
        };
        setTimeout(instance, this.speed);
      };

      TimeLine.prototype.stop = function() {
        var t, _i, _len, _ref, _results;
        this.is_on = false;
        _ref = this.tracks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(t.reset());
        }
        return _results;
      };

      TimeLine.prototype.check_precision = function() {
        var computed, real, result;
        real = window.performance.now() - this.origin_point;
        computed = this.position.total_time();
        result = real - computed;
        return result;
      };

      TimeLine.prototype.current_bar = function() {
        return this.grid[this.position.bar];
      };

      TimeLine.prototype.insert_bar = function(bar, index, mult) {
        var i, _i, _results;
        if (index == null) {
          index = 0;
        }
        if (mult == null) {
          mult = 1;
        }
        _results = [];
        for (i = _i = 1; 1 <= mult ? _i <= mult : _i >= mult; i = 1 <= mult ? ++_i : --_i) {
          _results.push(_a.insert(this.grid, index, bar));
        }
        return _results;
      };

      return TimeLine;

    })();
  });

}).call(this);
