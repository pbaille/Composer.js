// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/utils/Combinatorics", "lib/utils/Array_adds", "vendors/ruby"], function() {
    var DomainPartition, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    DomainPartition = AC.Utils.DomainPartition;
    root.MelodicPattern = (function() {
      function MelodicPattern(opt) {
        this.step_sequence = opt.step_sequence;
        this.iterations = opt.iterations || 1;
        this.count = {
          step: 0,
          cycle: 0
        };
      }

      MelodicPattern.prototype.cycle_step = function() {
        return _a.somme(this.step_sequence);
      };

      MelodicPattern.prototype.total_sequence = function() {
        var i, result, s, _i, _j, _len, _ref, _ref1;
        result = [];
        for (i = _i = 1, _ref = this.iterations; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _ref1 = this.step_sequence;
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            s = _ref1[_j];
            result.push(s);
          }
        }
        return result;
      };

      MelodicPattern.prototype.length = function() {
        return this.step_sequence.length * this.iterations;
      };

      MelodicPattern.prototype.cycle_amplitude = function() {
        var current, max, min, s, _i, _len, _ref;
        min = 0;
        max = 0;
        current = 0;
        _ref = this.step_sequence;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          current += s;
          if (current < min) {
            min = current;
          }
          if (current > max) {
            max = current;
          }
        }
        return [min, max];
      };

      MelodicPattern.prototype.amplitude = function() {
        var current, max, min, s, _i, _len, _ref;
        min = 0;
        max = 0;
        current = 0;
        _ref = this.total_sequence();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          current += s;
          if (current < min) {
            min = current;
          }
          if (current > max) {
            max = current;
          }
        }
        return [min, max];
      };

      MelodicPattern.prototype.next = function() {
        var step;
        step = this.step_sequence[this.count.step];
        this.count.step++;
        if (this.count.step === this.step_sequence.length) {
          this.count.step = 0;
          this.count.cycle++;
        }
        if (this.count.cycle >= this.iterations && this.count.step >= 1) {
          return false;
        } else {
          return step;
        }
      };

      MelodicPattern.prototype.permutations = function() {
        var results, step_seq, stepseq_perms, _i, _len;
        results = [];
        stepseq_perms = R(this.step_sequence).unique_permutation();
        for (_i = 0, _len = stepseq_perms.length; _i < _len; _i++) {
          step_seq = stepseq_perms[_i];
          results.push(new root.MelodicPattern({
            step_sequence: step_seq,
            iterations: this.iterations
          }));
        }
        return results;
      };

      return MelodicPattern;

    })();
    return root.MelodicPatternGen = (function() {
      function MelodicPatternGen(opt) {
        this.steps_array = opt.steps_array;
        this.iterations = opt.iterations;
        this.range = opt.range || null;
        this.cycle_step = opt.cycle_step;
        this.pattern_length = opt.pattern_length;
        this.patterns = [];
        this.patterns_calc();
      }

      MelodicPatternGen.prototype.patterns_calc = function() {
        var dp, i, l, r, _i, _len, _ref, _results;
        _ref = this.cycle_step;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = this.pattern_length;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              l = _ref1[_j];
              dp = new DomainPartition(this.steps_array, l, i);
              _results1.push((function() {
                var _k, _len2, _ref2, _results2;
                _ref2 = dp.results;
                _results2 = [];
                for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                  r = _ref2[_k];
                  _results2.push(this.patterns.push(new root.MelodicPattern({
                    step_sequence: r
                  })));
                }
                return _results2;
              }).call(this));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      MelodicPatternGen.prototype.give_pattern = function(bounds_from_current_pitch) {
        var bounds, cycle_step, i, mp, pat, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        if (bounds_from_current_pitch) {
          _ref = _a.scramble(this.patterns);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pat = _ref[_i];
            _ref1 = _a.scramble(pat.permutations());
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              mp = _ref1[_j];
              _ref2 = _a.scramble(this.iterations);
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                i = _ref2[_k];
                bounds = mp.cycle_amplitude();
                cycle_step = mp.cycle_step();
                if (cycle_step < 0) {
                  bounds[0] += i * cycle_step;
                } else if (cycle_step > 0) {
                  bounds[1] += i * cycle_step;
                }
                if (bounds_from_current_pitch[0] <= bounds[0] && bounds_from_current_pitch[1] >= bounds[1]) {
                  mp.iterations = i;
                  mp.count = {
                    step: 0,
                    cycle: 0
                  };
                  return mp;
                }
              }
            }
          }
        } else {
          pat = {};
          pat = _a.pick_random_el(this.patterns);
          pat.iterations = _a.pick_random_el(this.iterations);
          return pat;
        }
      };

      return MelodicPatternGen;

    })();
  });

}).call(this);
