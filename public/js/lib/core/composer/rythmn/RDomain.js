// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/core/base/RVal", "lib/core/base/Note", "lib/core/composer/rythmn/RConstants", "lib/utils/index", "vendors/underscore", "lib/utils/underscore_adds"], function() {
    var RK, RVal, Rational, root;
    root = typeof global !== "undefined" && global !== null ? global.AC.Core : window.AC.Core;
    RK = root.RK;
    RVal = AC.Core.RVal;
    Rational = AC.Utils.Rational;
    return root.RDomain = (function() {
      function RDomain(opt) {
        var k, v, _ref;
        this.prob = {
          poly_roots: {
            bin: 1,
            ter: 0.5,
            quint: 0,
            sept: 0
          },
          compositions: {
            simple: 1,
            double: 0.5,
            triple: 0
          }
        };
        _ref = opt.prob;
        for (k in _ref) {
          v = _ref[k];
          this.prob[k] = v;
        }
        this.median = opt.median || new RVal(1, 2);
        this.median_weight = opt.median_weight || 10;
        this.bounds = opt.bounds || [new RVal(2), new RVal(1, 4)];
        this.rvals = {};
        this._rvals_calc();
        this.pool = this._make_pool();
      }

      RDomain.prototype.peek_one = function() {
        return this.pool.peek()[0];
      };

      RDomain.prototype.peek_uniqs = function(n, removeBool) {
        return this.pool.peek(n, removeBool);
      };

      RDomain.prototype.peek = function(n) {
        var i, _i, _results;
        _results = [];
        for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
          _results.push(this.peek_one());
        }
        return _results;
      };

      RDomain.prototype.pop = function(n) {
        return this.pool.pop(n);
      };

      RDomain.prototype.set_median = function(rval) {
        this.median = rval;
        this._rvals_calc();
        return this;
      };

      RDomain.prototype.set_median_weight = function(int) {
        this.median_weight = int;
        this._rvals_calc();
        return this;
      };

      RDomain.prototype.set_bounds = function(slowest, highest) {
        this.bounds = [slowest, highest];
        this._rvals_calc();
        return this;
      };

      RDomain.prototype.set_prob = function(obj) {
        var k, v, _ref, _ref1;
        if (!obj) {
          return false;
        }
        _ref = obj.poly_roots;
        for (k in _ref) {
          v = _ref[k];
          this.prob.poly_roots[k] = v;
        }
        _ref1 = obj.compositions;
        for (k in _ref1) {
          v = _ref1[k];
          this.prob.compositions[k] = v;
        }
        this._rvals_calc();
        return this;
      };

      RDomain.prototype.set = function(obj) {
        if (opt.median) {
          this.median = opt.median;
        }
        if (opt.median_weight) {
          this.median_weight = opt.median_weight;
        }
        if (opt.bounds) {
          this.bounds = opt.bounds;
        }
        if (obj.prob) {
          this.set_prob(obj.prob);
        } else {
          this._rvals_calc();
        }
        return this;
      };

      RDomain.prototype._make_pool = function() {
        var data, rvals;
        rvals = _.concat(this.rvals.simple, this.rvals.composed);
        data = _.map(rvals, function(x) {
          return [x.toString(), _.product(_.values(x.prob)), x];
        });
        return _.weightedList(data);
      };

      RDomain.prototype._rvals_calc = function() {
        this.rvals.simple = this._simple_rvals_calc();
        return this.rvals.composed = this._composed_rvals_calc();
      };

      RDomain.prototype._simple_rvals_calc = function() {
        var el, k, ret, rvals, v, _i, _len, _ref,
          _this = this;
        ret = [];
        _ref = RK.simple_rvals;
        for (k in _ref) {
          v = _ref[k];
          if (this.prob.poly_roots[k] !== 0) {
            rvals = _.filter(v, function(rval) {
              return _this._in_bounds(rval);
            });
            for (_i = 0, _len = rvals.length; _i < _len; _i++) {
              el = rvals[_i];
              el.prob = {
                poly: this.prob.poly_roots[k],
                composition: this.prob.compositions.simple,
                distance: this._distance_prob(el)
              };
              ret.push(el);
            }
          }
        }
        return ret;
      };

      RDomain.prototype._composed_rvals_calc = function() {
        var comb, isnt_a_simple_rval, k, n, poly_base_based_group, poly_group, prob, ret, rv, v, val, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        ret = [];
        _ref = this.prob.compositions;
        for (k in _ref) {
          v = _ref[k];
          if (v !== 0 && k !== "simple") {
            n = k === "double" ? 2 : 3;
            poly_base_based_group = _.groupBy(this.rvals.simple, function(x) {
              return x.polyrythmic_base();
            });
            _ref1 = _.values(poly_base_based_group);
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              poly_group = _ref1[_i];
              _ref2 = _.combinations(poly_group, n);
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                comb = _ref2[_j];
                val = new RVal(0);
                for (_k = 0, _len2 = comb.length; _k < _len2; _k++) {
                  rv = comb[_k];
                  val.add(rv);
                }
                isnt_a_simple_rval = val.polyrythmic_base() === comb[0].polyrythmic_base();
                if (this._in_bounds(val) && isnt_a_simple_rval) {
                  ret.push(val);
                }
                prob = {
                  poly: _.median(_.map(comb, function(el) {
                    return el.prob.poly;
                  })),
                  composition: this.prob.compositions[k],
                  distance: this._distance_prob(val)
                };
                val.prob = prob;
              }
            }
          }
        }
        return ret;
      };

      RDomain.prototype._distance_prob = function(rval) {
        if (rval.lt(this.median)) {
          return _.scale(this.median.minus(rval).toFloat(), this.median.minus(this.bounds[1]).toFloat(), 0, 1, this.median_weight);
        } else if (rval.gt(this.median)) {
          return _.scale(rval.minus(this.median).toFloat(), this.bounds[0].minus(this.median).toFloat(), 0, 1, this.median_weight);
        } else {
          return this.median_weight;
        }
      };

      RDomain.prototype._in_bounds = function(rval) {
        return rval.le(this.bounds[0]) && rval.ge(this.bounds[1]);
      };

      return RDomain;

    })();
  });

}).call(this);
