// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/core/base/RVal", "lib/core/base/Note", "lib/core/composer/rythmn/RConstants", "lib/utils/index", "vendors/underscore", "lib/utils/underscore_adds"], function() {
    var RK, RVal, Rational, root;
    root = typeof global !== "undefined" && global !== null ? global.AC.Core : window.AC.Core;
    RK = root.RK;
    RVal = AC.Core.RVal;
    Rational = AC.Utils.Rational;
    return root.RParams = (function() {
      function RParams(opt) {
        var k, v, _ref;
        this.base = opt.base || 2;
        this.prob = {
          poly_roots: {
            bin: 1,
            ter: 0,
            quint: 0,
            sept: 0
          },
          compositions: {
            simple: 1,
            double: 0.5,
            triple: 0
          },
          poly_depths: {
            one: 1,
            two: 0,
            three: 0
          }
        };
        _ref = opt.prob;
        for (k in _ref) {
          v = _ref[k];
          this.prob[k] = v;
        }
        this.median = opt.median || new RVal(1, 2);
        this.median_weight = opt.median_weight || 0.5;
        this.bounds = opt.bounds || [new RVal(2), new RVal(1, 4)];
        this.simple_rvals = this.simple_rvals_calc();
        this.composed_rvals = this.composed_rvals_calc();
      }

      RParams.prototype.simple_rvals_calc = function() {
        var k, ret, v, _ref,
          _this = this;
        ret = {};
        _ref = RK.simple_rvals;
        for (k in _ref) {
          v = _ref[k];
          ret[k] = _.filter(v, function(x) {
            return x.le(_this.bounds[0]) && x.ge(_this.bounds[1]);
          });
        }
        return ret;
      };

      RParams.prototype.simple_rvals_array = function() {
        var arr;
        arr = _.values(this.simple_rvals_calc());
        return _.concat.apply(_, arr);
      };

      RParams.prototype.composed_rvals_calc = function() {
        var comb, depths, i, ret, rv, sum, x, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        depths = [];
        _ref = _.values(this.prob.compositions);
        for (x in _ref) {
          i = _ref[x];
          if (x !== 0) {
            depth.push(i);
          }
        }
        ret = [];
        for (_i = 0, _len = depths.length; _i < _len; _i++) {
          x = depths[_i];
          _ref1 = _.combinations(this.simple_rvals_array(), x);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            comb = _ref1[_j];
            sum = new RVal(0);
            for (_k = 0, _len2 = comb.length; _k < _len2; _k++) {
              rv = comb[_k];
              sum.add(rv);
            }
            if (sum.le(this.bounds[0]) && sum.ge(this.bounds[1])) {
              ret.push(sum);
            }
          }
        }
        return ret;
      };

      return RParams;

    })();
  });

}).call(this);
