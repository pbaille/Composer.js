// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(["lib/core/base/RVal", "lib/core/base/Note", "lib/utils/Rational", "lib/utils/Utils", "lib/midi/play", "vendors/ruby"], function() {
    var RVal, Rational, rat, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    rat = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(AC.Utils.Rational, args, function(){});
    };
    RVal = AC.Core.RVal;
    Rational = AC.Utils.Rational;
    return root.RGen = (function() {
      function RGen(opt) {
        if (!opt) {
          opt = {};
        }
        this.array = opt.prob_array || [];
      }

      RGen.prototype.set_prob_array = function(rval_occ_objects_arr) {
        return this.array = rval_occ_objects_arr;
      };

      RGen.prototype.generate = function() {
        var results;
        results = [];
        while (this.composer.ahead.lt(this.composer.advance)) {
          results.push(this.next());
        }
        return results;
      };

      RGen.prototype.next = function() {
        var i, pioche, position, x, _i, _j, _len, _ref, _ref1;
        position = timeline.position.plus(this.composer.ahead);
        pioche = [];
        _ref = this.available_vals();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          for (i = _j = 0, _ref1 = x.occ - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            pioche.push(x.rval);
          }
        }
        pioche = _a.shuffle(pioche);
        this.composer.ahead.add(pioche[0]);
        return {
          position: position,
          rval: pioche[0]
        };
      };

      RGen.prototype.available_vals = function() {
        var cond1, results, x, _i, _len, _ref;
        results = [];
        _ref = this.array;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          if (x.occ !== 0) {
            cond1 = x.rval.allowed_subs().indexOf(x.rval.plus(timeline.position.sub.plus(this.composer.ahead)).denom) >= 0;
            if (cond1) {
              results.push(x);
            }
          }
        }
        if (results.length === 0) {
          results.push(this.resolve_head());
        }
        return results;
      };

      RGen.prototype.resolve_head = function() {
        throw " have to implement Rgen#resolve_head ";
      };

      return RGen;

    })();
  });

}).call(this);
