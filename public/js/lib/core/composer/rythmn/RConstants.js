// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/core/base/RVal", "lib/core/base/Note", "lib/utils/index", "vendors/underscore", "lib/utils/underscore_adds"], function() {
    var RK, RVal, Rational, root;
    root = typeof global !== "undefined" && global !== null ? global.AC.Core : window.AC.Core;
    RVal = AC.Core.RVal;
    Rational = AC.Utils.Rational;
    RK = root.RK = {};
    RK.bases = [2, 3, 5, 7];
    RK.bases_names = ["bin", "ter", "quint", "sept"];
    RK.bounds = [new RVal(4), new RVal(1, 16)];
    RK.simple_rvals = (function() {
      var base, current_val, i, ret, _i, _len, _ref;
      ret = {
        bin: [RK.bounds[0]],
        ter: [],
        quint: [],
        sept: []
      };
      _ref = RK.bases;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        base = _ref[i];
        current_val = RK.bounds[0].div(new RVal(base));
        while (current_val.gt(RK.bounds[0])) {
          current_val.divide(new RVal(2));
        }
        while (current_val.ge(RK.bounds[1])) {
          ret[RK.bases_names[i]].push(current_val.clone());
          current_val.divide(new RVal(2));
        }
      }
      return ret;
    })();
    RK.composite_rvals = (function() {
      var b, base, base_index, base_name, ret, rv, rvals, temp, _i, _j, _len, _len1, _ref, _ref1;
      ret = {
        bin: [],
        ter: [],
        quint: [],
        sept: []
      };
      _ref = RK.simple_rvals;
      for (base_name in _ref) {
        rvals = _ref[base_name];
        base_index = _.indexOf(RK.bases_names, base_name);
        base = RK.bases[base_index];
        for (_i = 0, _len = rvals.length; _i < _len; _i++) {
          rv = rvals[_i];
          _ref1 = RK.bases.slice(1);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            b = _ref1[_j];
            temp = rv.clone().times(new RVal(b));
            if (!(b === base || temp.ge(RK.bounds[0]))) {
              ret[base_name].push(temp);
            }
          }
        }
      }
      return ret;
    })();
    RK.poly_rvals = "TODO";
    RK.all_rvals = (function() {
      var composite, k, ret, simple, _i, _len, _ref;
      ret = {};
      simple = RK.simple_rvals;
      composite = RK.composite_rvals;
      _ref = RK.bases_names;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        ret[k] = _.concat(simple[k], composite[k]);
      }
      return ret;
    })();
    return RK;
  });

}).call(this);
