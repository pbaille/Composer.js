// Generated by CoffeeScript 1.6.3
(function() {
  define([], function() {
    var root;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.Core;
    } else {
      root = window.AC.Core;
    }
    root.Metronome = (function() {
      function Metronome(opt) {
        this.bpm = opt.bpm;
        this.beats = opt.beats;
        this.unit = opt.unit;
        this.on_click = opt.on_click;
        this.listeners = opt.listeners || [];
      }

      Metronome.prototype.start = function() {
        var instance, l, _i, _len, _ref,
          _this = this;
        this.origin_point = window.performance.now();
        console.log("perf" + window.performance.now());
        console.log("date" + new Date().getTime());
        this.is_on = true;
        this.bars = 0;
        this.count = 0;
        this.speed = 60000 / (this.bpm * this.unit);
        console.log("speed" + this.speed);
        console.log("precision" + this.check_precision());
        if (this.on_click) {
          this.on_click(this.beats, this.unit, this.count);
        }
        _ref = this.listeners;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          l.bang(this);
        }
        instance = function() {
          var diff, _j, _len1, _ref1;
          _this.count++;
          if (_this.count === _this.beats * _this.unit) {
            _this.bars++;
            _this.count = 0;
          }
          if (_this.on_click) {
            _this.on_click(_this.beats, _this.unit, _this.count);
          }
          _ref1 = _this.listeners;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            l = _ref1[_j];
            l.bang(_this);
          }
          diff = _this.check_precision();
          if (_this.is_on) {
            return setTimeout(instance, _this.speed - diff);
          }
        };
        return setTimeout(instance, this.speed);
      };

      Metronome.prototype.stop = function() {
        if (this.bpm) {
          return this.is_on = false;
        } else {
          return console.log("this uncorrectly binded, please don't use #stop directly as callback");
        }
      };

      Metronome.prototype.total = function() {
        return rat(this.count, this.beats * this.unit).plus(this.bars).times(this.beats);
      };

      Metronome.prototype.check_precision = function() {
        return (window.performance.now() - this.origin_point) - this.total().times(rat(60, this.bpm)).toFloat() * 1000;
      };

      return Metronome;

    })();
    return AC.Core.Metronome;
  });

}).call(this);
