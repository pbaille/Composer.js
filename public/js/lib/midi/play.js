// Generated by CoffeeScript 1.6.3
(function() {
  define(["lib/core/base/Note", "lib/utils/Rational"], function() {
    var Note, Rational, root;
    Note = AC.Core.Note;
    Rational = AC.Utils.Rational;
    if (typeof global !== "undefined" && global !== null) {
      root = global.AC.MIDI;
    } else {
      root = window.AC.MIDI;
    }
    root.simple_play = function(opt) {
      var at, channel, duration, pitch, vel;
      pitch = opt.pitch;
      vel = opt.velocity;
      at = opt.at || window.performance.now();
      duration = opt.duration || at + 1000;
      channel = 143 + opt.channel || 144;
      midiOut.send([channel, pitch, vel], at);
      midiOut.send([channel, pitch, 0], at + duration);
      return "simple_play_end";
    };
    root.play_line = function(line, midi_chan) {
      var cn, n, _i, _len, _results;
      if (midi_chan == null) {
        midi_chan = 1;
      }
      if (!(line instanceof Array)) {
        line = [line];
      }
      _results = [];
      for (_i = 0, _len = line.length; _i < _len; _i++) {
        n = line[_i];
        if (n instanceof Note) {
          _results.push(AC.MIDI.simple_play({
            channel: midi_chan,
            pitch: n.pitch.value,
            velocity: n.velocity,
            duration: n.position.rval_to_ms(n.duration),
            at: n.position.to_performance_time()
          }));
        } else {
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = n.length; _j < _len1; _j++) {
              cn = n[_j];
              _results1.push(AC.MIDI.simple_play({
                channel: midi_chan,
                pitch: cn.pitch.value,
                velocity: cn.velocity,
                duration: cn.position.rval_to_ms(cn.duration),
                at: cn.position.to_performance_time()
              }));
            }
            return _results1;
          })());
        }
      }
      return _results;
    };
    root.all_off = function(chan) {
      var channel, i, _i, _results;
      channel = 143 + chan || 144;
      _results = [];
      for (i = _i = 0; _i <= 127; i = ++_i) {
        _results.push(midiOut.send([channel, i, 0], window.performance.now()));
      }
      return _results;
    };
    return root;
  });

}).call(this);
