// Generated by CoffeeScript 1.6.3
(function() {
  define(["vendors/ruby"], function() {
    _a.wrap_if_not = function(arr) {
      if (!(arr instanceof Array)) {
        arr = [arr];
      }
      return arr;
    };
    _a.rotations = function(arr) {
      var result, x, _i, _ref;
      result = [];
      for (x = _i = 0, _ref = arr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        result.push(_a.rotate(arr, x));
      }
      return _a.uniq(result);
    };
    _a.median = function(arr) {
      return _a.somme(arr) / arr.length;
    };
    _a.somme = function(arr) {
      return arr.reduce(function(previousValue, currentValue) {
        return previousValue + currentValue;
      });
    };
    _a.tonicize = function(arr) {
      var result,
        _this = this;
      result = arr.map(function(x) {
        return (x - arr[0] + 12) % 12;
      });
      return _a.sort(result);
    };
    _a.tonicized_rotations = function(arr) {
      return _a.rotations(arr).map(function(x) {
        return _a.tonicize(x);
      });
    };
    _a.to_functs = function(arr) {
      return arr.map(function(i) {
        if (i) {
          return i % 12;
        } else {
          return i;
        }
      });
    };
    return RubyJS.Array.unique_permutation = function(block) {
      var array_copy, j, l, _ref, _ref1, _results;
      array_copy = this.sort();
      block.call(array_copy.dup());
      if (arr.length < 2) {
        return;
      }
      _results = [];
      while (true) {
        j = this.length - 2;
        while (j > 0 && array_copy[j] >= array_copy[j + 1]) {
          j -= 1;
        }
        if (array_copy[j] < array_copy[j + 1]) {
          l = this.length - 1;
          while (array_copy[j] >= array_copy[l]) {
            l -= 1;
          }
          array_copy[j] = array_copy[l];
          array_copy[l] = array_copy[j];
          [].splice.apply(array_copy, [(_ref = j + 1), (-1) - _ref + 1].concat(_ref1 = _a.reverse(array_copy.slice(j + 1)))), _ref1;
          _results.push(block.call(array_copy.dup()));
        } else {
          break;
        }
      }
      return _results;
    };
  });

}).call(this);
