// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["lib/Rational", "../../js/vendors/ruby"], function(Rational, ruby) {
    var root;
    if (typeof global !== "undefined" && global !== null) {
      root = global;
    } else {
      root = window;
    }
    root.rat = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Rational, args, function(){});
    };
    root.MetaPitch = (function() {
      function MetaPitch(arg) {
        var k, v, _ref;
        if (typeof arg === 'string') {
          this.name = arg;
          this.int = root.MetaPitch.hash[this.name];
        } else {
          _ref = MetaPitch.hash;
          for (k in _ref) {
            v = _ref[k];
            if (v === arg) {
              this.name = k;
              this.int = arg;
            }
          }
        }
      }

      MetaPitch.hash = {
        "C": 0,
        "D": 2,
        "E": 4,
        "F": 5,
        "G": 7,
        "A": 9,
        "B": 11
      };

      MetaPitch.find_closest = function(int) {
        var result;
        result = _h.key(this.hash, int);
        if (result) {
          return result;
        } else {
          return _h.key(this.hash, int + 1) + 'b';
        }
      };

      return MetaPitch;

    })();
    root.Alteration = (function() {
      function Alteration(arg) {
        var hash;
        hash = {
          "bb": -2,
          "b": -1,
          "n": 0,
          "#": 1,
          "x": 2
        };
        if (typeof arg === 'string') {
          this.name = arg;
          this.int = hash[arg];
        } else {
          this.name = _h.key(hash, arg);
          this.int = arg;
        }
      }

      return Alteration;

    })();
    root.PitchClass = (function() {
      function PitchClass(arg) {
        var alt, mp;
        if (typeof arg !== 'string') {
          arg = root.MetaPitch.find_closest(arg);
        }
        mp = new root.MetaPitch(arg[0]);
        if (arg.slice(1, 3)) {
          alt = new root.Alteration(arg.slice(1, 3));
        } else {
          alt = new root.Alteration("n");
        }
        this.name = arg;
        this.int = mp.int + alt.int;
      }

      return PitchClass;

    })();
    root.Pitch = (function(_super) {
      __extends(Pitch, _super);

      function Pitch(pitchClass, octave) {
        var p;
        if (typeof pitchClass === "string") {
          p = pitchClass.split(" ");
          Pitch.__super__.constructor.call(this, p[0]);
          if (p[1]) {
            this.octave = +p[1];
          } else if (octave) {
            this.octave = octave;
          } else {
            this.octave = 0;
          }
          this.int = this.int + (octave + 5) * 12;
        } else {
          console.log("hello");
          Pitch.__super__.constructor.call(this, pitchClass % 12);
          this.octave = octave || Math.floor(pitchClass / 12 - 5);
        }
        this.value = pitchClass % 12 + (this.octave + 5) * 12;
      }

      return Pitch;

    })(root.PitchClass);
    root.Note = (function(_super) {
      __extends(Note, _super);

      function Note(pitch, vel, duration) {
        if (vel == null) {
          vel = 60;
        }
        if (duration == null) {
          duration = 1;
        }
        this.pitch = new root.Pitch(pitch);
        this.velocity = vel;
        this.duration = duration;
      }

      return Note;

    })(root.Pitch);
    return root;
  });

}).call(this);
