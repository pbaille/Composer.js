// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(["lib/Rational", "lib/Note", "../../js/vendors/ruby"], function(Rational, Note, ruby) {
    var RGen, root;
    if (typeof global !== "undefined" && global !== null) {
      root = global;
    } else {
      root = window;
    }
    root.rat = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Rational, args, function(){});
    };
    RGen = root.RGen;
    return RGen = (function() {
      function RGen(dur_occ_obj_arr) {
        this.array = dur_occ_obj_arr;
        this.clock = rat(0, 1);
      }

      RGen.prototype.add = function(dur_occ_obj) {
        var x, _i, _len, _results;
        if (!dur_occ_obj.length) {
          dur_occ_obj = [dur_occ_obj];
        }
        _results = [];
        for (_i = 0, _len = dur_occ_obj.length; _i < _len; _i++) {
          x = dur_occ_obj[_i];
          this.remove(x.value);
          _results.push(this.array.push(x));
        }
        return _results;
      };

      RGen.prototype.remove = function(dur) {
        var i, rem_indexes, x, _i, _j, _len, _len1, _ref, _results;
        rem_indexes = [];
        _ref = this.array;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          x = _ref[i];
          if (x.value.eq(dur)) {
            rem_indexes.push(i);
          }
        }
        _results = [];
        for (_j = 0, _len1 = rem_indexes.length; _j < _len1; _j++) {
          x = rem_indexes[_j];
          _results.push(this.array.splice(x, 1));
        }
        return _results;
      };

      RGen.prototype.denoms = function() {
        var res;
        res = [];
        this.array.map(function(x) {
          var den, mod, _results;
          mod = 0;
          den = x.value.denom;
          _results = [];
          while (mod === 0) {
            if (res.indexOf(den) === -1) {
              res.push(den);
            }
            mod = den % 2;
            _results.push(den /= 2);
          }
          return _results;
        });
        return res;
      };

      RGen.prototype.next = function(n) {
        var f, result, _i,
          _this = this;
        result = [];
        f = function() {
          var available_vals, i, pioche, x, _i, _j, _k, _len, _len1, _ref, _ref1;
          available_vals = [];
          _ref = _this.array;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            if (_this.denoms().indexOf(x.value.plus(_this.clock).denom) >= 0) {
              available_vals.push(x);
            }
          }
          pioche = [];
          for (_j = 0, _len1 = available_vals.length; _j < _len1; _j++) {
            x = available_vals[_j];
            for (i = _k = 0, _ref1 = x.occ - 1; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
              pioche.push(x.value);
            }
          }
          pioche = _a.shuffle(pioche);
          result.push(pioche[0]);
          return _this.clock.add(pioche[0]);
        };
        for (_i = 1; 1 <= n ? _i <= n : _i >= n; 1 <= n ? _i++ : _i--) {
          f();
        }
        return result;
      };

      return RGen;

    })();
  });

}).call(this);
